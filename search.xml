<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[我在想，你善待世界，大概世界也会善待你吧！ 捣鼓一个星期，总算是把博客搭得差不多了。搭博客的过程简直就是一个踩坑之旅。 博客框架选择开始之前，在知乎逛了逛，发现搭博客/网站的框架主流的有这么三个： WordPress早闻大名，但是PHP平台的，果断放弃 Hexo基于node，知乎很多人推荐，其中不乏像尤雨溪这样的大神 Hugo基于Go，这一两年火起来的，Github上的star数直逼Hexo。它的定位很是高远，要做世上最快的静态网站生成框架。有网友做过对比说，Hugo的编译速度可以比Hexo快到几十倍 毋庸置疑，基于node的Hexo显然是对搞前端的同学来说最好的选择。 主题重构选主题时的发现，再一次证明了我的选择。 我发现Hexo社区有一款非常棒的主题——next。简直可以用excellent来形容，它好倒不在UI上，那怎么厉害了？ 受欢迎：它在Github上有近1万1的star 生态好：很多网友贡献代码，使得next的功能强大，有详细的文档 配置性好：尽管集成了那么多功能，但通过配置一个config文件，一步搞定 扩展性高：通过swig模板语言编写，方便维护和扩展 可是我对它的UI并不太喜欢，感觉太老土了。于是，我站在巨人的肩上，开始了主题重构。 最后的效果，就是呈现在各位面前的。 我给它取了个名字，叫Memory。 绝地求生“吃鸡”游戏最近很火，我也来蹭下热度。～(￣▽￣～)~ 判断当前页面要实现我的设计，一个首页问题就是判断当前页面的状态，是主页，文章，归档？最后，我在Hexo官方文档找到了答案，嗯，辅助函数： is_home()：检查是否为首页is_post()：检查是否为文章is_archive()：检查是否为归档页… 这些条件函数配合swig之类的模板引擎就能写出你需要的页面逻辑 so nice! 读取页面信息要用siwg写出内容响应式的页面，读取每个页面或文章的具体属性是绕不开的问题。 理论上，读取文章属性，post这个变量最合适不过了。可是，事情总不会那么顺利。 next主题的文档布局是一个大的类名为container的div包裹了header、main、footer三个部分。源码里，文章页的文章内容是包裹在main里面的，而我的需求是将文章的meta信息在header部分显示，而header和main源码中时在不同模块里实现的，这时用post变量就会出现读取不到值的现象。 这时，有官方文档解救了我！我发现，page和post这两个有着剪不断理还乱的联系的变量。那就试试page变量！ Did it! 再配合着front-matter，那feel倍爽儿啊！！！可以“为所欲为”了！ 终极bug该来的总会来的。 最后重构的事基本完成了，要部署到Github上了，当我在线访问时，发现我的页面竟然是这样的： Are you kidding me?！！！ 我在本地启server预览时可是OK的！？怎么会public文件夹里的东西和本地server访问的不一样？见鬼了。一套代码，两种编译结果！？ 为此，苦苦挣扎了一天，各种百度，各种看文档，各种问师兄，最后还到hexo仓库下开了个issue。 过了几小时，发现并没有人鸟我。唉，要放弃了。滚去啃转头书了。 越啃越困。。。唉。。。 就在这时，我突然想起了官方文档里提到，对于服务器： 12$ hexo server // 动态监听文件变化$ hexo server -s // 只访问public文件夹里的资源 而对于生成器： 12$ hexo generate // 生成静态文件$ hexo generate -w // 监视文件变动并立即重新生成静态文件 既然hexo s和hexo g的编译结果不一样，而hexo g -w和hexo s同样是动态编译，是不是就可以生成想要的结果呢？ Did it! 写在最后Hello World，大概是每人程序员写的第一个程序了。记得去年阿里18周年年会时，黄龙外挂的就是“Hello World”的巨幅喷绘 我在想，你善待世界，大概世界也会善待你吧！ 这应该算是是我第一篇严格意义上的博客了，写博客是进入一个新世界，每一天、每一段旅程都是进入一个新世界。 我常常会跟女朋友讲我在的学的、在做的东西，我总是试着用通俗的语言让她能够明白。前段时间，看一位网友写自己理解闭包的博客，里面有句话让我印象深刻：“如果一个概念你不能用一两句话说明白，那你就是没有真正地懂。” 真是精辟！于是，我计划写算是一个系列吧，用最通俗、精练的话去总结一些前端的一些基础问题。一来总结的过程对自己是提高，也为今年的校招做准备，二来要是能对谁有一点帮助那就意外的收获了。 这个系列或许可以叫“前端那些事儿”之类的吧，哈哈！当年明月通俗幽默说明史，我为何不可通俗幽默说前端呢？ “开机，启动，接入！” 既然选择了远方，便只顾风雨兼程——汪国真]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初次见面，请多指教]]></title>
    <url>%2F2018%2F01%2F18%2Fnice-to-meet-you%2F</url>
    <content type="text"><![CDATA[大家好，你们可以叫我萧文，也可以叫我Albert。 萧文，这个名字和我颇有渊源，小时候就差点叫了这个名字。我在想，以后要是进了哪个厂，我的花名就叫萧文了。 关于我的英文名有个小故事：高中时，英语老师以抽签的方式给每人都取了个英文名，还告诉我Albert有“聪明、高贵、人类的守护者”的意思，我也就阴差阳错地承担起了守护人类、拯救地球的责任。哈哈！ 高考填志愿时，凭着自己多年来练就的“3秒修好掉链条的单车”的天赋，我报了机械专业，自此离拯救地球的道路远走远远。还好，当时学了个C语言程序设计。 本科毕业后，来杭州读了个小硕。没错，还是机械╯▂╰。可是我读的专业是机械和计算机的结合呀，哈哈哈！ 众多CS方向中，我选择了前端。为啥？喜欢呗！我发现这是一个可以将我所有的兴趣都结合起来的。。。 什么呢？ 嗯，事业！！！ 前端太好玩了！什么设计、图形、webGL、动画、游戏、业务、数据可视化、算法，各种新工具、新技术，应有尽有。 有句话叫做：“有人的地方就有江湖。”我想说：“未来的时代，有人的地方就有前端。” 扯了这么多，该滚去学习了。 还有很多知识学，还有好多代码要写，长路漫漫，任重道远。。。]]></content>
      <categories>
        <category>随想</category>
      </categories>
  </entry>
</search>
